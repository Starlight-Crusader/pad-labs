version: '3.8'

services:
  postgres_a:
    image: postgres:14
    container_name: postgres_a
    volumes:
      - postgres_data_a:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: service_a_db
      POSTGRES_USER: service_a_user
      POSTGRES_PASSWORD: service_a_password
    ports:
      - "5432:5432"
    networks:
      - pad-network

  postgres_b:
    image: postgres:14
    container_name: postgres_b
    volumes:
      - postgres_data_b:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: service_b_db
      POSTGRES_USER: service_b_user
      POSTGRES_PASSWORD: service_b_password
    ports:
      - "5433:5432"
    networks:
      - pad-network

  service-a-1:
    container_name: service-a-1
    build:
      context: ./sA
    entrypoint: ["./entrypoint.sh"]
    volumes:
      - ./sA:/app
    depends_on:
      - postgres_a
      - api-gateway
    environment:
      - DJANGO_SETTINGS_MODULE=sA.settings
      - DATABASE_URL=postgres://service_a_user:service_a_password@postgres_a:5432/service_a_db
      - API_GATEWAY_BASE_URL=http://api-gateway:8080/
      - SERVICE_TYPE=A
      - SD_HOST=service-discovery
      - SD_PORT=50051
      - PORT=8000
      - SLEEP_DURATION_S=10
      - LOGGING=0
    ports:
      - "8000:8000"
    networks:
      - pad-network

  service-a-2:
    container_name: service-a-2
    build:
      context: ./sA
    entrypoint: ["./entrypoint.sh"]
    volumes:
      - ./sA:/app
    depends_on:
      - postgres_a
      - api-gateway
    environment:
      - DJANGO_SETTINGS_MODULE=sA.settings
      - DATABASE_URL=postgres://service_a_user:service_a_password@postgres_a:5432/service_a_db
      - API_GATEWAY_BASE_URL=http://api-gateway:8080/
      - SERVICE_TYPE=A
      - SD_HOST=service-discovery
      - SD_PORT=50051
      - PORT=8001
      - SLEEP_DURATION_S=10
      - LOGGING=0
    ports:
      - "8001:8000"
    networks:
      - pad-network

  # service-a-3:
  #   container_name: service-a-3
  #   build:
  #     context: ./sA
  #   entrypoint: ["./entrypoint.sh"]
  #   volumes:
  #     - ./sA:/app
  #   depends_on:
  #     - postgres_a
  #     - api-gateway
  #   environment:
  #     - DJANGO_SETTINGS_MODULE=sA.settings
  #     - DATABASE_URL=postgres://service_a_user:service_a_password@postgres_a:5432/service_a_db
  #     - API_GATEWAY_BASE_URL=http://api-gateway:8080/
  #     - SERVICE_TYPE=A
  #     - SD_HOST=service-discovery
  #     - SD_PORT=50051
  #     - PORT=8002
  #     - SLEEP_DURATION_S=10
  #   ports:
  #     - "8002:8000"
  #   networks:
  #     - pad-network

  service-b-1:
    container_name: service-b-1
    build:
      context: ./sB
    entrypoint: ["./entrypoint.sh"]
    volumes:
      - ./sB:/app
    depends_on:
      - postgres_b
      - api-gateway
    environment:
      - DJANGO_SETTINGS_MODULE=sB.settings
      - DATABASE_URL=postgres://service_b_user:service_b_password@postgres_b:5432/service_b_db
      - API_GATEWAY_BASE_URL=http://api-gateway:8080/
      - SERVICE_TYPE=B
      - SD_HOST=service-discovery
      - SD_PORT=50051
      - PORT=8003
      - LOGGING=0
      - UD_CACHE_HOST_1=ud_cache_cluster_redis_1
      - UD_CACHE_HOST_2=ud_cache_cluster_redis_2
      - UD_CACHE_HOST_3=ud_cache_cluster_redis_3
    ports:
      - "8003:8000"
    networks:
      - pad-network

  service-b-2:
    container_name: service-b-2
    build:
      context: ./sB
    entrypoint: ["./entrypoint.sh"]
    volumes:
      - ./sB:/app
    depends_on:
      - postgres_b
      - api-gateway
    environment:
      - DJANGO_SETTINGS_MODULE=sB.settings
      - DATABASE_URL=postgres://service_b_user:service_b_password@postgres_b:5432/service_b_db
      - API_GATEWAY_BASE_URL=http://api-gateway:8080/
      - SERVICE_TYPE=B
      - SD_HOST=service-discovery
      - SD_PORT=50051
      - PORT=8004
      - LOGGING=0
      - UD_CACHE_HOST_1=ud_cache_cluster_redis_1
      - UD_CACHE_HOST_2=ud_cache_cluster_redis_2
      - UD_CACHE_HOST_3=ud_cache_cluster_redis_3
    ports:
      - "8004:8000"
    networks:
      - pad-network

  # service-b-3:
  #   container_name: service-b-3
  #   build:
  #     context: ./sB
  #   entrypoint: ["./entrypoint.sh"]
  #   volumes:
  #     - ./sB:/app
  #   depends_on:
  #     - postgres_b
  #     - api-gateway
  #   environment:
  #     - DJANGO_SETTINGS_MODULE=sB.settings
  #     - DATABASE_URL=postgres://service_b_user:service_b_password@postgres_b:5432/service_b_db
  #     - API_GATEWAY_BASE_URL=http://api-gateway:8080/
  #     - SERVICE_TYPE=B
  #     - SD_HOST=service-discovery
  #     - SD_PORT=50051
  #     - PORT=8005
  #     - LOGGING=0
  #     - UD_CACHE_HOST_1=ud_cache_cluster_redis_1
  #     - UD_CACHE_HOST_2=ud_cache_cluster_redis_2
  #     - UD_CACHE_HOST_3=ud_cache_cluster_redis_3
  #   ports:
  #     - "8005:8000"
  #   networks:
  #     - pad-network

  sm_redis:
    image: redis:latest
    container_name: sm_redis
    ports:
      - "6379:6379"
    command: redis-server --save "" --appendonly no
    networks:
      - pad-network

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
    environment:
      - PORT=8080
      - SM_REDIS_URL=redis://sm_redis:6379
      - SERV_REST_PORT=8000
      - REQUEST_TIMEOUT_MS=5000
      - MAX_TASKS_PER_SERVICE=1
      - CRTICAL_LOAD_PER_MIN=5
      - MAX_RETRIES=3
      - MAX_REDIRECTS=3
    ports:
      - "8080:8080"
    depends_on:
      - sm_redis
      - service-discovery
    networks:
      - pad-network

  service-discovery:
    container_name: service-discovery
    build:
      context: ./service-discovery
    environment:
      - PORT=50051
      - SM_REDIS_URL=redis://sm_redis:6379
      - SERV_REST_PORT=8000
    ports:
      - "50051:50051"
    depends_on:
      - sm_redis
    networks:
      - pad-network
    volumes:
      - service_discovery-data:/app/logs
  
  ud_cache_cluster_redis_1:
    image: redis:latest
    container_name: ud_cache_cluster_redis_1
    ports:
      - "6380:6379"
    command: redis-server --save "" --appendonly no
    networks:
      - pad-network

  ud_cache_cluster_redis_2:
    image: redis:latest
    container_name: ud_cache_cluster_redis_2
    ports:
      - "6381:6379"
    command: redis-server --save "" --appendonly no
    networks:
      - pad-network

  ud_cache_cluster_redis_3:
    image: redis:latest
    container_name: ud_cache_cluster_redis_3
    ports:
      - "6382:6379"
    command: redis-server --save "" --appendonly no
    networks:
      - pad-network
  
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   networks:
  #     - pad-network
  #   volumes:
  #     - elasticsearch-data:/usr/share/elasticsearch/data

  # logstash:
  #   image: docker.elastic.co/logstash/logstash:7.14.0
  #   container_name: logstash
  #   ports:
  #     - "5000:5000"
  #     - "9600:9600"
  #   networks:
  #     - pad-network
  #   volumes:
  #     - ./config/logstash/pipeline:/usr/share/logstash/pipeline
  #   depends_on:
  #     - elasticsearch

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.14.0
  #   container_name: kibana
  #   environment:
  #     - ELASTICSEARCH_URL=http://elasticsearch:9200
  #   ports:
  #     - "5601:5601"
  #   networks:
  #     - pad-network
  #   depends_on:
  #     - elasticsearch

  # filebeat:
  #   image: docker.elastic.co/beats/filebeat:8.15.3
  #   container_name: filebeat
  #   command: ["filebeat", "-e", "-strict.perms=false"]
  #   networks:
  #     - pad-network
  #   volumes:
  #     - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
  #     - service_discovery-data:/usr/share/filebeat/data
  #   depends_on:
  #     - logstash

volumes:
  postgres_data_a:
  postgres_data_b:
  # elasticsearch-data:
  service_discovery-data:

networks:
  pad-network:
    driver: bridge